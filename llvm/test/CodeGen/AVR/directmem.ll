; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mattr=sram,addsubiw < %s -mtriple=avr | FileCheck %s
; RUN: llc -mattr=sram,avrtiny < %s -mtriple=avr | FileCheck %s --check-prefix=CHECK-TINY

@char = common global i8 0
@char.array = common global [3 x i8] zeroinitializer
@char.static = internal global i8 0

@int = common global i16 0
@int.array = common global [3 x i16] zeroinitializer
@int.static = internal global i16 0

@long = common global i32 0
@long.array = common global [3 x i32] zeroinitializer
@long.static = internal global i32 0

@longlong = common global i64 0
@longlong.array = common global [3 x i64] zeroinitializer
@longlong.static = internal global i64 0

define void @global8_store() {
; CHECK-LABEL: global8_store:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    ldi r24, 6
; CHECK-NEXT:    sts char, r24
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: global8_store:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    ldi r24, 6
; CHECK-TINY-NEXT:    sts char, r24
; CHECK-TINY-NEXT:    ret
  store i8 6, ptr @char
  ret void
}

define i8 @global8_load() {
; CHECK-LABEL: global8_load:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    lds r24, char
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: global8_load:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    lds r24, char
; CHECK-TINY-NEXT:    ret
  %result = load i8, ptr @char
  ret i8 %result
}

define void @array8_store() {
; CHECK-LABEL: array8_store:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    ldi r24, 3
; CHECK-NEXT:    sts char.array+2, r24
; CHECK-NEXT:    ldi r24, 1
; CHECK-NEXT:    ldi r25, 2
; CHECK-NEXT:    sts char.array+1, r25
; CHECK-NEXT:    sts char.array, r24
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: array8_store:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    ldi r24, 1
; CHECK-TINY-NEXT:    ldi r25, 2
; CHECK-TINY-NEXT:    ldi r20, lo8(char.array)
; CHECK-TINY-NEXT:    ldi r21, hi8(char.array)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 3
; CHECK-TINY-NEXT:    sts char.array+2, r24
; CHECK-TINY-NEXT:    ret
  store i8 1, ptr @char.array
  store i8 2, ptr getelementptr inbounds ([3 x i8], ptr @char.array, i32 0, i64 1)
  store i8 3, ptr getelementptr inbounds ([3 x i8], ptr @char.array, i32 0, i64 2)
  ret void
}

define i8 @array8_load() {
; CHECK-LABEL: array8_load:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    lds r24, char.array+2
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: array8_load:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    lds r24, char.array+2
; CHECK-TINY-NEXT:    ret
  %result = load i8, ptr getelementptr inbounds ([3 x i8], ptr @char.array, i32 0, i64 2)
  ret i8 %result
}

define i8 @static8_inc() {
; CHECK-LABEL: static8_inc:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    lds r24, char.static
; CHECK-NEXT:    inc r24
; CHECK-NEXT:    sts char.static, r24
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: static8_inc:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    lds r24, char.static
; CHECK-TINY-NEXT:    inc r24
; CHECK-TINY-NEXT:    sts char.static, r24
; CHECK-TINY-NEXT:    ret
  %1 = load i8, ptr @char.static
  %inc = add nsw i8 %1, 1
  store i8 %inc, ptr @char.static
  ret i8 %inc
}

define void @global16_store() {
; CHECK-LABEL: global16_store:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    ldi r24, 187
; CHECK-NEXT:    ldi r25, 170
; CHECK-NEXT:    sts int+1, r25
; CHECK-NEXT:    sts int, r24
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: global16_store:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    ldi r24, 187
; CHECK-TINY-NEXT:    ldi r25, 170
; CHECK-TINY-NEXT:    ldi r20, lo8(int)
; CHECK-TINY-NEXT:    ldi r21, hi8(int)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ret
  store i16 43707, ptr @int
  ret void
}

define i16 @global16_load() {
; CHECK-LABEL: global16_load:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    lds r24, int
; CHECK-NEXT:    lds r25, int+1
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: global16_load:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    ldi r24, lo8(int)
; CHECK-TINY-NEXT:    ldi r25, hi8(int)
; CHECK-TINY-NEXT:    mov r30, r24
; CHECK-TINY-NEXT:    mov r31, r25
; CHECK-TINY-NEXT:    ld r24, Z+
; CHECK-TINY-NEXT:    ld r25, Z+
; CHECK-TINY-NEXT:    ret
  %result = load i16, ptr @int
  ret i16 %result
}

define void @array16_store() {
; CHECK-LABEL: array16_store:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    ldi r24, 204
; CHECK-NEXT:    ldi r25, 170
; CHECK-NEXT:    sts int.array+3, r25
; CHECK-NEXT:    sts int.array+2, r24
; CHECK-NEXT:    ldi r24, 187
; CHECK-NEXT:    ldi r25, 170
; CHECK-NEXT:    sts int.array+1, r25
; CHECK-NEXT:    sts int.array, r24
; CHECK-NEXT:    ldi r24, 221
; CHECK-NEXT:    ldi r25, 170
; CHECK-NEXT:    sts int.array+5, r25
; CHECK-NEXT:    sts int.array+4, r24
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: array16_store:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    ldi r24, 204
; CHECK-TINY-NEXT:    ldi r25, 170
; CHECK-TINY-NEXT:    ldi r20, lo8(int.array+2)
; CHECK-TINY-NEXT:    ldi r21, hi8(int.array+2)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 187
; CHECK-TINY-NEXT:    ldi r25, 170
; CHECK-TINY-NEXT:    ldi r20, lo8(int.array)
; CHECK-TINY-NEXT:    ldi r21, hi8(int.array)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 221
; CHECK-TINY-NEXT:    ldi r25, 170
; CHECK-TINY-NEXT:    ldi r20, lo8(int.array+4)
; CHECK-TINY-NEXT:    ldi r21, hi8(int.array+4)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ret



  store i16 43707, ptr @int.array
  store i16 43724, ptr getelementptr inbounds ([3 x i16], ptr @int.array, i32 0, i64 1)
  store i16 43741, ptr getelementptr inbounds ([3 x i16], ptr @int.array, i32 0, i64 2)
  ret void
}

define i16 @array16_load() {
; CHECK-LABEL: array16_load:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    lds r24, int.array+4
; CHECK-NEXT:    lds r25, int.array+5
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: array16_load:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    ldi r24, lo8(int.array+4)
; CHECK-TINY-NEXT:    ldi r25, hi8(int.array+4)
; CHECK-TINY-NEXT:    mov r30, r24
; CHECK-TINY-NEXT:    mov r31, r25
; CHECK-TINY-NEXT:    ld r24, Z+
; CHECK-TINY-NEXT:    ld r25, Z+
; CHECK-TINY-NEXT:    ret
  %result = load i16, ptr getelementptr inbounds ([3 x i16], ptr @int.array, i32 0, i64 2)
  ret i16 %result
}

define i16 @static16_inc() {
; CHECK-LABEL: static16_inc:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    lds r24, int.static
; CHECK-NEXT:    lds r25, int.static+1
; CHECK-NEXT:    adiw r24, 1
; CHECK-NEXT:    sts int.static+1, r25
; CHECK-NEXT:    sts int.static, r24
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: static16_inc:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    ldi r30, lo8(int.static)
; CHECK-TINY-NEXT:    ldi r31, hi8(int.static)
; CHECK-TINY-NEXT:    ld r24, Z+
; CHECK-TINY-NEXT:    ld r25, Z+
; CHECK-TINY-NEXT:    subi r30, 2
; CHECK-TINY-NEXT:    sbci r31, 0
; CHECK-TINY-NEXT:    adiw r24, 1
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ret
  %1 = load i16, ptr @int.static
  %inc = add nsw i16 %1, 1
  store i16 %inc, ptr @int.static
  ret i16 %inc
}

define void @global32_store() {
; CHECK-LABEL: global32_store:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    ldi r24, 187
; CHECK-NEXT:    ldi r25, 170
; CHECK-NEXT:    sts long+3, r25
; CHECK-NEXT:    sts long+2, r24
; CHECK-NEXT:    ldi r24, 221
; CHECK-NEXT:    ldi r25, 204
; CHECK-NEXT:    sts long+1, r25
; CHECK-NEXT:    sts long, r24
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: global32_store:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    ldi r24, 187
; CHECK-TINY-NEXT:    ldi r25, 170
; CHECK-TINY-NEXT:    ldi r20, lo8(long+2)
; CHECK-TINY-NEXT:    ldi r21, hi8(long+2)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 221
; CHECK-TINY-NEXT:    ldi r25, 204
; CHECK-TINY-NEXT:    ldi r20, lo8(long)
; CHECK-TINY-NEXT:    ldi r21, hi8(long)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ret
  store i32 2864434397, ptr @long
  ret void
}

define i32 @global32_load() {
; CHECK-LABEL: global32_load:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    lds r22, long
; CHECK-NEXT:    lds r23, long+1
; CHECK-NEXT:    lds r24, long+2
; CHECK-NEXT:    lds r25, long+3
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: global32_load:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    ldi r24, lo8(long)
; CHECK-TINY-NEXT:    ldi r25, hi8(long)
; CHECK-TINY-NEXT:    mov r30, r24
; CHECK-TINY-NEXT:    mov r31, r25
; CHECK-TINY-NEXT:    ld r22, Z+
; CHECK-TINY-NEXT:    ld r23, Z+
; CHECK-TINY-NEXT:    ldi r24, lo8(long+2)
; CHECK-TINY-NEXT:    ldi r25, hi8(long+2)
; CHECK-TINY-NEXT:    mov r30, r24
; CHECK-TINY-NEXT:    mov r31, r25
; CHECK-TINY-NEXT:    ld r24, Z+
; CHECK-TINY-NEXT:    ld r25, Z+
; CHECK-TINY-NEXT:    ret
  %result = load i32, ptr @long
  ret i32 %result
}

define void @array32_store() {
; CHECK-LABEL: array32_store:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    ldi r24, 102
; CHECK-NEXT:    ldi r25, 85
; CHECK-NEXT:    sts long.array+7, r25
; CHECK-NEXT:    sts long.array+6, r24
; CHECK-NEXT:    ldi r24, 136
; CHECK-NEXT:    ldi r25, 119
; CHECK-NEXT:    sts long.array+5, r25
; CHECK-NEXT:    sts long.array+4, r24
; CHECK-NEXT:    ldi r24, 27
; CHECK-NEXT:    ldi r25, 172
; CHECK-NEXT:    sts long.array+3, r25
; CHECK-NEXT:    sts long.array+2, r24
; CHECK-NEXT:    ldi r24, 68
; CHECK-NEXT:    ldi r25, 13
; CHECK-NEXT:    sts long.array+1, r25
; CHECK-NEXT:    sts long.array, r24
; CHECK-NEXT:    ldi r24, 170
; CHECK-NEXT:    ldi r25, 153
; CHECK-NEXT:    sts long.array+11, r25
; CHECK-NEXT:    sts long.array+10, r24
; CHECK-NEXT:    ldi r24, 204
; CHECK-NEXT:    ldi r25, 187
; CHECK-NEXT:    sts long.array+9, r25
; CHECK-NEXT:    sts long.array+8, r24
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: array32_store:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    ldi r24, 102
; CHECK-TINY-NEXT:    ldi r25, 85
; CHECK-TINY-NEXT:    ldi r20, lo8(long.array+6)
; CHECK-TINY-NEXT:    ldi r21, hi8(long.array+6)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 136
; CHECK-TINY-NEXT:    ldi r25, 119
; CHECK-TINY-NEXT:    ldi r20, lo8(long.array+4)
; CHECK-TINY-NEXT:    ldi r21, hi8(long.array+4)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 27
; CHECK-TINY-NEXT:    ldi r25, 172
; CHECK-TINY-NEXT:    ldi r20, lo8(long.array+2)
; CHECK-TINY-NEXT:    ldi r21, hi8(long.array+2)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 68
; CHECK-TINY-NEXT:    ldi r25, 13
; CHECK-TINY-NEXT:    ldi r20, lo8(long.array)
; CHECK-TINY-NEXT:    ldi r21, hi8(long.array)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 170
; CHECK-TINY-NEXT:    ldi r25, 153
; CHECK-TINY-NEXT:    ldi r20, lo8(long.array+10)
; CHECK-TINY-NEXT:    ldi r21, hi8(long.array+10)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 204
; CHECK-TINY-NEXT:    ldi r25, 187
; CHECK-TINY-NEXT:    ldi r20, lo8(long.array+8)
; CHECK-TINY-NEXT:    ldi r21, hi8(long.array+8)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ret






  store i32 2887454020, ptr @long.array
  store i32 1432778632, ptr getelementptr inbounds ([3 x i32], ptr @long.array, i32 0, i64 1)
  store i32 2578103244, ptr getelementptr inbounds ([3 x i32], ptr @long.array, i32 0, i64 2)
  ret void
}

define i32 @array32_load() {
; CHECK-LABEL: array32_load:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    lds r22, long.array+8
; CHECK-NEXT:    lds r23, long.array+9
; CHECK-NEXT:    lds r24, long.array+10
; CHECK-NEXT:    lds r25, long.array+11
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: array32_load:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    ldi r24, lo8(long.array+8)
; CHECK-TINY-NEXT:    ldi r25, hi8(long.array+8)
; CHECK-TINY-NEXT:    mov r30, r24
; CHECK-TINY-NEXT:    mov r31, r25
; CHECK-TINY-NEXT:    ld r22, Z+
; CHECK-TINY-NEXT:    ld r23, Z+
; CHECK-TINY-NEXT:    ldi r24, lo8(long.array+10)
; CHECK-TINY-NEXT:    ldi r25, hi8(long.array+10)
; CHECK-TINY-NEXT:    mov r30, r24
; CHECK-TINY-NEXT:    mov r31, r25
; CHECK-TINY-NEXT:    ld r24, Z+
; CHECK-TINY-NEXT:    ld r25, Z+
; CHECK-TINY-NEXT:    ret
  %result = load i32, ptr getelementptr inbounds ([3 x i32], ptr @long.array, i32 0, i64 2)
  ret i32 %result
}

define i32 @static32_inc() {
; CHECK-LABEL: static32_inc:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    lds r22, long.static
; CHECK-NEXT:    lds r23, long.static+1
; CHECK-NEXT:    lds r24, long.static+2
; CHECK-NEXT:    lds r25, long.static+3
; CHECK-NEXT:    subi r22, 255
; CHECK-NEXT:    sbci r23, 255
; CHECK-NEXT:    sbci r24, 255
; CHECK-NEXT:    sbci r25, 255
; CHECK-NEXT:    sts long.static+3, r25
; CHECK-NEXT:    sts long.static+2, r24
; CHECK-NEXT:    sts long.static+1, r23
; CHECK-NEXT:    sts long.static, r22
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: static32_inc:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    ldi r24, lo8(long.static)
; CHECK-TINY-NEXT:    ldi r25, hi8(long.static)
; CHECK-TINY-NEXT:    mov r30, r24
; CHECK-TINY-NEXT:    mov r31, r25
; CHECK-TINY-NEXT:    ld r22, Z+
; CHECK-TINY-NEXT:    ld r23, Z+
; CHECK-TINY-NEXT:    subi r30, 2
; CHECK-TINY-NEXT:    sbci r31, 0
; CHECK-TINY-NEXT:    mov r20, r30
; CHECK-TINY-NEXT:    mov r21, r31
; CHECK-TINY-NEXT:    ldi r30, lo8(long.static+2)
; CHECK-TINY-NEXT:    ldi r31, hi8(long.static+2)
; CHECK-TINY-NEXT:    ld r24, Z+
; CHECK-TINY-NEXT:    ld r25, Z+
; CHECK-TINY-NEXT:    subi r30, 2
; CHECK-TINY-NEXT:    sbci r31, 0
; CHECK-TINY-NEXT:    subi r22, 255
; CHECK-TINY-NEXT:    sbci r23, 255
; CHECK-TINY-NEXT:    sbci r24, 255
; CHECK-TINY-NEXT:    sbci r25, 255
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r22
; CHECK-TINY-NEXT:    st Z+, r23
; CHECK-TINY-NEXT:    ret
  %1 = load i32, ptr @long.static
  %inc = add nsw i32 %1, 1
  store i32 %inc, ptr @long.static
  ret i32 %inc
}

define void @global64_store() {
; CHECK-LABEL: global64_store:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    ldi r24, 34
; CHECK-NEXT:    ldi r25, 17
; CHECK-NEXT:    sts longlong+7, r25
; CHECK-NEXT:    sts longlong+6, r24
; CHECK-NEXT:    ldi r24, 68
; CHECK-NEXT:    ldi r25, 51
; CHECK-NEXT:    sts longlong+5, r25
; CHECK-NEXT:    sts longlong+4, r24
; CHECK-NEXT:    ldi r24, 102
; CHECK-NEXT:    ldi r25, 85
; CHECK-NEXT:    sts longlong+3, r25
; CHECK-NEXT:    sts longlong+2, r24
; CHECK-NEXT:    ldi r24, 136
; CHECK-NEXT:    ldi r25, 119
; CHECK-NEXT:    sts longlong+1, r25
; CHECK-NEXT:    sts longlong, r24
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: global64_store:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    ldi r24, 34
; CHECK-TINY-NEXT:    ldi r25, 17
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong+6)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong+6)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 68
; CHECK-TINY-NEXT:    ldi r25, 51
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong+4)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong+4)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 102
; CHECK-TINY-NEXT:    ldi r25, 85
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong+2)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong+2)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 136
; CHECK-TINY-NEXT:    ldi r25, 119
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ret
  store i64 1234605616436508552, ptr @longlong
  ret void
}

define i64 @global64_load() {
; CHECK-LABEL: global64_load:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    lds r18, longlong
; CHECK-NEXT:    lds r19, longlong+1
; CHECK-NEXT:    lds r20, longlong+2
; CHECK-NEXT:    lds r21, longlong+3
; CHECK-NEXT:    lds r22, longlong+4
; CHECK-NEXT:    lds r23, longlong+5
; CHECK-NEXT:    lds r24, longlong+6
; CHECK-NEXT:    lds r25, longlong+7
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: global64_load:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong+6)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong+6)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    ld r20, Z+
; CHECK-TINY-NEXT:    ld r21, Z+
; CHECK-TINY-NEXT:    mov r30, r24
; CHECK-TINY-NEXT:    mov r31, r25
; CHECK-TINY-NEXT:    subi r30, 250
; CHECK-TINY-NEXT:    sbci r31, 255
; CHECK-TINY-NEXT:    st Z+, r20
; CHECK-TINY-NEXT:    st Z+, r21
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong+4)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong+4)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    ld r20, Z+
; CHECK-TINY-NEXT:    ld r21, Z+
; CHECK-TINY-NEXT:    mov r30, r24
; CHECK-TINY-NEXT:    mov r31, r25
; CHECK-TINY-NEXT:    subi r30, 252
; CHECK-TINY-NEXT:    sbci r31, 255
; CHECK-TINY-NEXT:    st Z+, r20
; CHECK-TINY-NEXT:    st Z+, r21
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong+2)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong+2)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    ld r20, Z+
; CHECK-TINY-NEXT:    ld r21, Z+
; CHECK-TINY-NEXT:    mov r30, r24
; CHECK-TINY-NEXT:    mov r31, r25
; CHECK-TINY-NEXT:    subi r30, 254
; CHECK-TINY-NEXT:    sbci r31, 255
; CHECK-TINY-NEXT:    st Z+, r20
; CHECK-TINY-NEXT:    st Z+, r21
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    ld r20, Z+
; CHECK-TINY-NEXT:    ld r21, Z+
; CHECK-TINY-NEXT:    mov r30, r24
; CHECK-TINY-NEXT:    mov r31, r25
; CHECK-TINY-NEXT:    st Z+, r20
; CHECK-TINY-NEXT:    st Z+, r21
; CHECK-TINY-NEXT:    ret
  %result = load i64, ptr @longlong
  ret i64 %result
}

define void @array64_store() {
; CHECK-LABEL: array64_store:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    ldi r24, 35
; CHECK-NEXT:    ldi r25, 1
; CHECK-NEXT:    sts longlong.array+15, r25
; CHECK-NEXT:    sts longlong.array+14, r24
; CHECK-NEXT:    ldi r24, 103
; CHECK-NEXT:    ldi r25, 69
; CHECK-NEXT:    sts longlong.array+13, r25
; CHECK-NEXT:    sts longlong.array+12, r24
; CHECK-NEXT:    ldi r24, 171
; CHECK-NEXT:    ldi r25, 137
; CHECK-NEXT:    sts longlong.array+11, r25
; CHECK-NEXT:    sts longlong.array+10, r24
; CHECK-NEXT:    ldi r24, 239
; CHECK-NEXT:    ldi r25, 205
; CHECK-NEXT:    sts longlong.array+9, r25
; CHECK-NEXT:    sts longlong.array+8, r24
; CHECK-NEXT:    ldi r24, 34
; CHECK-NEXT:    ldi r25, 17
; CHECK-NEXT:    sts longlong.array+7, r25
; CHECK-NEXT:    sts longlong.array+6, r24
; CHECK-NEXT:    ldi r24, 68
; CHECK-NEXT:    ldi r25, 51
; CHECK-NEXT:    sts longlong.array+5, r25
; CHECK-NEXT:    sts longlong.array+4, r24
; CHECK-NEXT:    ldi r24, 102
; CHECK-NEXT:    ldi r25, 85
; CHECK-NEXT:    sts longlong.array+3, r25
; CHECK-NEXT:    sts longlong.array+2, r24
; CHECK-NEXT:    ldi r24, 136
; CHECK-NEXT:    ldi r25, 119
; CHECK-NEXT:    sts longlong.array+1, r25
; CHECK-NEXT:    sts longlong.array, r24
; CHECK-NEXT:    ldi r24, 124
; CHECK-NEXT:    ldi r25, 25
; CHECK-NEXT:    sts longlong.array+23, r25
; CHECK-NEXT:    sts longlong.array+22, r24
; CHECK-NEXT:    ldi r24, 15
; CHECK-NEXT:    ldi r25, 121
; CHECK-NEXT:    sts longlong.array+21, r25
; CHECK-NEXT:    sts longlong.array+20, r24
; CHECK-NEXT:    ldi r24, 8
; CHECK-NEXT:    ldi r25, 63
; CHECK-NEXT:    sts longlong.array+19, r25
; CHECK-NEXT:    sts longlong.array+18, r24
; CHECK-NEXT:    ldi r24, 104
; CHECK-NEXT:    ldi r25, 107
; CHECK-NEXT:    sts longlong.array+17, r25
; CHECK-NEXT:    sts longlong.array+16, r24
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: array64_store:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    ldi r24, 35
; CHECK-TINY-NEXT:    ldi r25, 1
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong.array+14)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong.array+14)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 103
; CHECK-TINY-NEXT:    ldi r25, 69
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong.array+12)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong.array+12)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 171
; CHECK-TINY-NEXT:    ldi r25, 137
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong.array+10)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong.array+10)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 239
; CHECK-TINY-NEXT:    ldi r25, 205
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong.array+8)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong.array+8)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 34
; CHECK-TINY-NEXT:    ldi r25, 17
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong.array+6)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong.array+6)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 68
; CHECK-TINY-NEXT:    ldi r25, 51
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong.array+4)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong.array+4)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 102
; CHECK-TINY-NEXT:    ldi r25, 85
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong.array+2)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong.array+2)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 136
; CHECK-TINY-NEXT:    ldi r25, 119
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong.array)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong.array)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 124
; CHECK-TINY-NEXT:    ldi r25, 25
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong.array+22)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong.array+22)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 15
; CHECK-TINY-NEXT:    ldi r25, 121
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong.array+20)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong.array+20)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 8
; CHECK-TINY-NEXT:    ldi r25, 63
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong.array+18)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong.array+18)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ldi r24, 104
; CHECK-TINY-NEXT:    ldi r25, 107
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong.array+16)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong.array+16)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ret
  store i64 1234605616436508552, ptr @longlong.array
  store i64 81985529216486895, ptr getelementptr inbounds ([3 x i64], ptr @longlong.array, i64 0, i64 1)
  store i64 1836475854449306472, ptr getelementptr inbounds ([3 x i64], ptr @longlong.array, i64 0, i64 2)
  ret void
}

define i64 @array64_load() {
; CHECK-LABEL: array64_load:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    lds r18, longlong.array+16
; CHECK-NEXT:    lds r19, longlong.array+17
; CHECK-NEXT:    lds r20, longlong.array+18
; CHECK-NEXT:    lds r21, longlong.array+19
; CHECK-NEXT:    lds r22, longlong.array+20
; CHECK-NEXT:    lds r23, longlong.array+21
; CHECK-NEXT:    lds r24, longlong.array+22
; CHECK-NEXT:    lds r25, longlong.array+23
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: array64_load:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong.array+22)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong.array+22)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    ld r20, Z+
; CHECK-TINY-NEXT:    ld r21, Z+
; CHECK-TINY-NEXT:    mov r30, r24
; CHECK-TINY-NEXT:    mov r31, r25
; CHECK-TINY-NEXT:    subi r30, 250
; CHECK-TINY-NEXT:    sbci r31, 255
; CHECK-TINY-NEXT:    st Z+, r20
; CHECK-TINY-NEXT:    st Z+, r21
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong.array+20)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong.array+20)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    ld r20, Z+
; CHECK-TINY-NEXT:    ld r21, Z+
; CHECK-TINY-NEXT:    mov r30, r24
; CHECK-TINY-NEXT:    mov r31, r25
; CHECK-TINY-NEXT:    subi r30, 252
; CHECK-TINY-NEXT:    sbci r31, 255
; CHECK-TINY-NEXT:    st Z+, r20
; CHECK-TINY-NEXT:    st Z+, r21
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong.array+18)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong.array+18)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    ld r20, Z+
; CHECK-TINY-NEXT:    ld r21, Z+
; CHECK-TINY-NEXT:    mov r30, r24
; CHECK-TINY-NEXT:    mov r31, r25
; CHECK-TINY-NEXT:    subi r30, 254
; CHECK-TINY-NEXT:    sbci r31, 255
; CHECK-TINY-NEXT:    st Z+, r20
; CHECK-TINY-NEXT:    st Z+, r21
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong.array+16)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong.array+16)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    ld r20, Z+
; CHECK-TINY-NEXT:    ld r21, Z+
; CHECK-TINY-NEXT:    mov r30, r24
; CHECK-TINY-NEXT:    mov r31, r25
; CHECK-TINY-NEXT:    st Z+, r20
; CHECK-TINY-NEXT:    st Z+, r21
; CHECK-TINY-NEXT:    ret
  %result = load i64, ptr getelementptr inbounds ([3 x i64], ptr @longlong.array, i64 0, i64 2)
  ret i64 %result
}

define i64 @static64_inc() {
; CHECK-LABEL: static64_inc:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    lds r18, longlong.static
; CHECK-NEXT:    lds r19, longlong.static+1
; CHECK-NEXT:    lds r20, longlong.static+2
; CHECK-NEXT:    lds r21, longlong.static+3
; CHECK-NEXT:    lds r22, longlong.static+4
; CHECK-NEXT:    lds r23, longlong.static+5
; CHECK-NEXT:    lds r24, longlong.static+6
; CHECK-NEXT:    lds r25, longlong.static+7
; CHECK-NEXT:    subi r18, 255
; CHECK-NEXT:    sbci r19, 255
; CHECK-NEXT:    sbci r20, 255
; CHECK-NEXT:    sbci r21, 255
; CHECK-NEXT:    sbci r22, 255
; CHECK-NEXT:    sbci r23, 255
; CHECK-NEXT:    sbci r24, 255
; CHECK-NEXT:    sbci r25, 255
; CHECK-NEXT:    sts longlong.static+7, r25
; CHECK-NEXT:    sts longlong.static+6, r24
; CHECK-NEXT:    sts longlong.static+5, r23
; CHECK-NEXT:    sts longlong.static+4, r22
; CHECK-NEXT:    sts longlong.static+3, r21
; CHECK-NEXT:    sts longlong.static+2, r20
; CHECK-NEXT:    sts longlong.static+1, r19
; CHECK-NEXT:    sts longlong.static, r18
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: static64_inc:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    push r18
; CHECK-TINY-NEXT:    push r19
; CHECK-TINY-NEXT:    push r28
; CHECK-TINY-NEXT:    push r29
; CHECK-TINY-NEXT:    in r28, 61
; CHECK-TINY-NEXT:    in r29, 62
; CHECK-TINY-NEXT:    sbiw r28, 6
; CHECK-TINY-NEXT:    in r16, 63
; CHECK-TINY-NEXT:    cli
; CHECK-TINY-NEXT:    out 62, r29
; CHECK-TINY-NEXT:    out 63, r16
; CHECK-TINY-NEXT:    out 61, r28
; CHECK-TINY-NEXT:    ldi r20, lo8(longlong.static)
; CHECK-TINY-NEXT:    ldi r21, hi8(longlong.static)
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    in r16, 63
; CHECK-TINY-NEXT:    adiw r28, 5
; CHECK-TINY-NEXT:    st Y+, r30 ; 2-byte Folded Spill
; CHECK-TINY-NEXT:    st Y+, r31 ; 2-byte Folded Spill
; CHECK-TINY-NEXT:    subi r28, 2
; CHECK-TINY-NEXT:    sbci r29, 0
; CHECK-TINY-NEXT:    sbiw r28, 5
; CHECK-TINY-NEXT:    out 63, r16
; CHECK-TINY-NEXT:    ld r20, Z+
; CHECK-TINY-NEXT:    ld r21, Z+
; CHECK-TINY-NEXT:    ldi r22, lo8(longlong.static+2)
; CHECK-TINY-NEXT:    ldi r23, hi8(longlong.static+2)
; CHECK-TINY-NEXT:    mov r30, r22
; CHECK-TINY-NEXT:    mov r31, r23
; CHECK-TINY-NEXT:    in r16, 63
; CHECK-TINY-NEXT:    adiw r28, 3
; CHECK-TINY-NEXT:    st Y+, r30 ; 2-byte Folded Spill
; CHECK-TINY-NEXT:    st Y+, r31 ; 2-byte Folded Spill
; CHECK-TINY-NEXT:    subi r28, 2
; CHECK-TINY-NEXT:    sbci r29, 0
; CHECK-TINY-NEXT:    sbiw r28, 3
; CHECK-TINY-NEXT:    out 63, r16
; CHECK-TINY-NEXT:    ld r22, Z+
; CHECK-TINY-NEXT:    ld r23, Z+
; CHECK-TINY-NEXT:    ldi r30, lo8(longlong.static+4)
; CHECK-TINY-NEXT:    ldi r31, hi8(longlong.static+4)
; CHECK-TINY-NEXT:    in r16, 63
; CHECK-TINY-NEXT:    adiw r28, 1
; CHECK-TINY-NEXT:    st Y+, r30 ; 2-byte Folded Spill
; CHECK-TINY-NEXT:    st Y+, r31 ; 2-byte Folded Spill
; CHECK-TINY-NEXT:    subi r28, 2
; CHECK-TINY-NEXT:    sbci r29, 0
; CHECK-TINY-NEXT:    sbiw r28, 1
; CHECK-TINY-NEXT:    out 63, r16
; CHECK-TINY-NEXT:    ld r26, Z+
; CHECK-TINY-NEXT:    ld r27, Z+
; CHECK-TINY-NEXT:    ldi r30, lo8(longlong.static+6)
; CHECK-TINY-NEXT:    ldi r31, hi8(longlong.static+6)
; CHECK-TINY-NEXT:    ld r18, Z+
; CHECK-TINY-NEXT:    ld r19, Z+
; CHECK-TINY-NEXT:    subi r30, 2
; CHECK-TINY-NEXT:    sbci r31, 0
; CHECK-TINY-NEXT:    subi r20, 255
; CHECK-TINY-NEXT:    sbci r21, 255
; CHECK-TINY-NEXT:    sbci r22, 255
; CHECK-TINY-NEXT:    sbci r23, 255
; CHECK-TINY-NEXT:    sbci r26, 255
; CHECK-TINY-NEXT:    sbci r27, 255
; CHECK-TINY-NEXT:    sbci r18, 255
; CHECK-TINY-NEXT:    sbci r19, 255
; CHECK-TINY-NEXT:    st Z+, r18
; CHECK-TINY-NEXT:    st Z+, r19
; CHECK-TINY-NEXT:    in r16, 63
; CHECK-TINY-NEXT:    adiw r28, 1
; CHECK-TINY-NEXT:    ld r30, Y+ ; 2-byte Folded Reload
; CHECK-TINY-NEXT:    ld r31, Y+ ; 2-byte Folded Reload
; CHECK-TINY-NEXT:    subi r28, 2
; CHECK-TINY-NEXT:    sbci r29, 0
; CHECK-TINY-NEXT:    sbiw r28, 1
; CHECK-TINY-NEXT:    out 63, r16
; CHECK-TINY-NEXT:    st Z+, r26
; CHECK-TINY-NEXT:    st Z+, r27
; CHECK-TINY-NEXT:    in r16, 63
; CHECK-TINY-NEXT:    adiw r28, 3
; CHECK-TINY-NEXT:    ld r30, Y+ ; 2-byte Folded Reload
; CHECK-TINY-NEXT:    ld r31, Y+ ; 2-byte Folded Reload
; CHECK-TINY-NEXT:    subi r28, 2
; CHECK-TINY-NEXT:    sbci r29, 0
; CHECK-TINY-NEXT:    sbiw r28, 3
; CHECK-TINY-NEXT:    out 63, r16
; CHECK-TINY-NEXT:    st Z+, r22
; CHECK-TINY-NEXT:    st Z+, r23
; CHECK-TINY-NEXT:    in r16, 63
; CHECK-TINY-NEXT:    adiw r28, 5
; CHECK-TINY-NEXT:    ld r30, Y+ ; 2-byte Folded Reload
; CHECK-TINY-NEXT:    ld r31, Y+ ; 2-byte Folded Reload
; CHECK-TINY-NEXT:    subi r28, 2
; CHECK-TINY-NEXT:    sbci r29, 0
; CHECK-TINY-NEXT:    sbiw r28, 5
; CHECK-TINY-NEXT:    out 63, r16
; CHECK-TINY-NEXT:    st Z+, r20
; CHECK-TINY-NEXT:    st Z+, r21
; CHECK-TINY-NEXT:    mov r30, r24
; CHECK-TINY-NEXT:    mov r31, r25
; CHECK-TINY-NEXT:    subi r30, 250
; CHECK-TINY-NEXT:    sbci r31, 255
; CHECK-TINY-NEXT:    st Z+, r18
; CHECK-TINY-NEXT:    st Z+, r19
; CHECK-TINY-NEXT:    subi r30, 8
; CHECK-TINY-NEXT:    sbci r31, 0
; CHECK-TINY-NEXT:    subi r30, 252
; CHECK-TINY-NEXT:    sbci r31, 255
; CHECK-TINY-NEXT:    st Z+, r26
; CHECK-TINY-NEXT:    st Z+, r27
; CHECK-TINY-NEXT:    subi r30, 6
; CHECK-TINY-NEXT:    sbci r31, 0
; CHECK-TINY-NEXT:    subi r30, 254
; CHECK-TINY-NEXT:    sbci r31, 255
; CHECK-TINY-NEXT:    st Z+, r22
; CHECK-TINY-NEXT:    st Z+, r23
; CHECK-TINY-NEXT:    subi r30, 4
; CHECK-TINY-NEXT:    sbci r31, 0
; CHECK-TINY-NEXT:    st Z+, r20
; CHECK-TINY-NEXT:    st Z+, r21
; CHECK-TINY-NEXT:    adiw r28, 6
; CHECK-TINY-NEXT:    in r16, 63
; CHECK-TINY-NEXT:    cli
; CHECK-TINY-NEXT:    out 62, r29
; CHECK-TINY-NEXT:    out 63, r16
; CHECK-TINY-NEXT:    out 61, r28
; CHECK-TINY-NEXT:    pop r29
; CHECK-TINY-NEXT:    pop r28
; CHECK-TINY-NEXT:    pop r19
; CHECK-TINY-NEXT:    pop r18
; CHECK-TINY-NEXT:    ret
  %1 = load i64, ptr @longlong.static
  %inc = add nsw i64 %1, 1
  store i64 %inc, ptr @longlong.static
  ret i64 %inc
}

define i8 @constantaddr_read8() {
; CHECK-LABEL: constantaddr_read8:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    lds r24, 1234
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: constantaddr_read8:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    lds r24, 1234
; CHECK-TINY-NEXT:    ret
  %1 = load i8, ptr inttoptr (i16 1234 to ptr)
  ret i8 %1
}

define i16 @constantaddr_read16() {
; CHECK-LABEL: constantaddr_read16:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    lds r24, 1234
; CHECK-NEXT:    lds r25, 1235
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: constantaddr_read16:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    ldi r24, 210
; CHECK-TINY-NEXT:    ldi r25, 4
; CHECK-TINY-NEXT:    mov r30, r24
; CHECK-TINY-NEXT:    mov r31, r25
; CHECK-TINY-NEXT:    ld r24, Z+
; CHECK-TINY-NEXT:    ld r25, Z+
; CHECK-TINY-NEXT:    ret
  %1 = load i16, ptr inttoptr (i16 1234 to ptr)
  ret i16 %1
}

define void @constantaddr_write8() {
; CHECK-LABEL: constantaddr_write8:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    ldi r24, 22
; CHECK-NEXT:    sts 1234, r24
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: constantaddr_write8:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    ldi r24, 22
; CHECK-TINY-NEXT:    sts 1234, r24
; CHECK-TINY-NEXT:    ret
  store i8 22, ptr inttoptr (i16 1234 to ptr)
  ret void
}

define void @constantaddr_write16() {
; CHECK-LABEL: constantaddr_write16:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    ldi r24, 174
; CHECK-NEXT:    ldi r25, 8
; CHECK-NEXT:    sts 1235, r25
; CHECK-NEXT:    sts 1234, r24
; CHECK-NEXT:    ret
;
; CHECK-TINY-LABEL: constantaddr_write16:
; CHECK-TINY:       ; %bb.0:
; CHECK-TINY-NEXT:    ldi r24, 174
; CHECK-TINY-NEXT:    ldi r25, 8
; CHECK-TINY-NEXT:    ldi r20, 210
; CHECK-TINY-NEXT:    ldi r21, 4
; CHECK-TINY-NEXT:    mov r30, r20
; CHECK-TINY-NEXT:    mov r31, r21
; CHECK-TINY-NEXT:    st Z+, r24
; CHECK-TINY-NEXT:    st Z+, r25
; CHECK-TINY-NEXT:    ret
  store i16 2222, ptr inttoptr (i16 1234 to ptr)
  ret void
}
