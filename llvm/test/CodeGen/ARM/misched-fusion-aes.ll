; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc %s -o - -mtriple=armv8 -mattr=+crypto,+fuse-aes -enable-misched -disable-post-ra | FileCheck %s

declare <16 x i8> @llvm.arm.neon.aese(<16 x i8> %d, <16 x i8> %k)
declare <16 x i8> @llvm.arm.neon.aesmc(<16 x i8> %d)
declare <16 x i8> @llvm.arm.neon.aesd(<16 x i8> %d, <16 x i8> %k)
declare <16 x i8> @llvm.arm.neon.aesimc(<16 x i8> %d)

define void @aesea(ptr %a0, ptr %b0, ptr %c0, <16 x i8> %d, <16 x i8> %e) {
; CHECK-LABEL: aesea:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    add r12, r0, #48
; CHECK-NEXT:    vld1.8 {d26, d27}, [r0]!
; CHECK-NEXT:    add r3, r1, #32
; CHECK-NEXT:    vld1.8 {d22, d23}, [r1]!
; CHECK-NEXT:    vld1.8 {d24, d25}, [r0]!
; CHECK-NEXT:    vld1.8 {d20, d21}, [r3]!
; CHECK-NEXT:    mov r1, sp
; CHECK-NEXT:    vld1.64 {d16, d17}, [r1]
; CHECK-NEXT:    add r1, sp, #16
; CHECK-NEXT:    vld1.64 {d18, d19}, [r1]
; CHECK-NEXT:    aese.8 q13, q11
; CHECK-NEXT:    aesmc.8 q13, q13
; CHECK-NEXT:    vld1.64 {d28, d29}, [r0]
; CHECK-NEXT:    aese.8 q13, q10
; CHECK-NEXT:    aesmc.8 q13, q13
; CHECK-NEXT:    aese.8 q12, q11
; CHECK-NEXT:    aesmc.8 q12, q12
; CHECK-NEXT:    aese.8 q13, q8
; CHECK-NEXT:    vld1.64 {d30, d31}, [r12]
; CHECK-NEXT:    aese.8 q12, q10
; CHECK-NEXT:    aesmc.8 q12, q12
; CHECK-NEXT:    veor q13, q13, q9
; CHECK-NEXT:    aese.8 q14, q11
; CHECK-NEXT:    aesmc.8 q14, q14
; CHECK-NEXT:    aese.8 q12, q8
; CHECK-NEXT:    aese.8 q14, q10
; CHECK-NEXT:    aesmc.8 q14, q14
; CHECK-NEXT:    aese.8 q15, q11
; CHECK-NEXT:    aesmc.8 q11, q15
; CHECK-NEXT:    veor q12, q12, q9
; CHECK-NEXT:    aese.8 q14, q8
; CHECK-NEXT:    add r0, r2, #32
; CHECK-NEXT:    vst1.8 {d26, d27}, [r2]!
; CHECK-NEXT:    aese.8 q11, q10
; CHECK-NEXT:    aesmc.8 q10, q11
; CHECK-NEXT:    veor q11, q14, q9
; CHECK-NEXT:    aese.8 q10, q8
; CHECK-NEXT:    vst1.64 {d24, d25}, [r2]
; CHECK-NEXT:    veor q8, q10, q9
; CHECK-NEXT:    vst1.8 {d22, d23}, [r0]!
; CHECK-NEXT:    vst1.64 {d16, d17}, [r0]
; CHECK-NEXT:    bx lr
  %d0 = load <16 x i8>, ptr %a0
  %a1 = getelementptr inbounds <16 x i8>, ptr %a0, i64 1
  %d1 = load <16 x i8>, ptr %a1
  %a2 = getelementptr inbounds <16 x i8>, ptr %a0, i64 2
  %d2 = load <16 x i8>, ptr %a2
  %a3 = getelementptr inbounds <16 x i8>, ptr %a0, i64 3
  %d3 = load <16 x i8>, ptr %a3
  %k0 = load <16 x i8>, ptr %b0
  %e00 = call <16 x i8> @llvm.arm.neon.aese(<16 x i8> %d0, <16 x i8> %k0)
  %f00 = call <16 x i8> @llvm.arm.neon.aesmc(<16 x i8> %e00)
  %e01 = call <16 x i8> @llvm.arm.neon.aese(<16 x i8> %d1, <16 x i8> %k0)
  %f01 = call <16 x i8> @llvm.arm.neon.aesmc(<16 x i8> %e01)
  %e02 = call <16 x i8> @llvm.arm.neon.aese(<16 x i8> %d2, <16 x i8> %k0)
  %f02 = call <16 x i8> @llvm.arm.neon.aesmc(<16 x i8> %e02)
  %e03 = call <16 x i8> @llvm.arm.neon.aese(<16 x i8> %d3, <16 x i8> %k0)
  %f03 = call <16 x i8> @llvm.arm.neon.aesmc(<16 x i8> %e03)
  %b1 = getelementptr inbounds <16 x i8>, ptr %b0, i64 1
  %k1 = load <16 x i8>, ptr %b1
  %e10 = call <16 x i8> @llvm.arm.neon.aese(<16 x i8> %f00, <16 x i8> %k1)
  %f10 = call <16 x i8> @llvm.arm.neon.aesmc(<16 x i8> %e00)
  %e11 = call <16 x i8> @llvm.arm.neon.aese(<16 x i8> %f01, <16 x i8> %k1)
  %f11 = call <16 x i8> @llvm.arm.neon.aesmc(<16 x i8> %e01)
  %e12 = call <16 x i8> @llvm.arm.neon.aese(<16 x i8> %f02, <16 x i8> %k1)
  %f12 = call <16 x i8> @llvm.arm.neon.aesmc(<16 x i8> %e02)
  %e13 = call <16 x i8> @llvm.arm.neon.aese(<16 x i8> %f03, <16 x i8> %k1)
  %f13 = call <16 x i8> @llvm.arm.neon.aesmc(<16 x i8> %e03)
  %b2 = getelementptr inbounds <16 x i8>, ptr %b0, i64 2
  %k2 = load <16 x i8>, ptr %b2
  %e20 = call <16 x i8> @llvm.arm.neon.aese(<16 x i8> %f10, <16 x i8> %k2)
  %f20 = call <16 x i8> @llvm.arm.neon.aesmc(<16 x i8> %e10)
  %e21 = call <16 x i8> @llvm.arm.neon.aese(<16 x i8> %f11, <16 x i8> %k2)
  %f21 = call <16 x i8> @llvm.arm.neon.aesmc(<16 x i8> %e11)
  %e22 = call <16 x i8> @llvm.arm.neon.aese(<16 x i8> %f12, <16 x i8> %k2)
  %f22 = call <16 x i8> @llvm.arm.neon.aesmc(<16 x i8> %e12)
  %e23 = call <16 x i8> @llvm.arm.neon.aese(<16 x i8> %f13, <16 x i8> %k2)
  %f23 = call <16 x i8> @llvm.arm.neon.aesmc(<16 x i8> %e13)
  %b3 = getelementptr inbounds <16 x i8>, ptr %b0, i64 3
  %k3 = load <16 x i8>, ptr %b3
  %e30 = call <16 x i8> @llvm.arm.neon.aese(<16 x i8> %f20, <16 x i8> %k3)
  %f30 = call <16 x i8> @llvm.arm.neon.aesmc(<16 x i8> %e20)
  %e31 = call <16 x i8> @llvm.arm.neon.aese(<16 x i8> %f21, <16 x i8> %k3)
  %f31 = call <16 x i8> @llvm.arm.neon.aesmc(<16 x i8> %e21)
  %e32 = call <16 x i8> @llvm.arm.neon.aese(<16 x i8> %f22, <16 x i8> %k3)
  %f32 = call <16 x i8> @llvm.arm.neon.aesmc(<16 x i8> %e22)
  %e33 = call <16 x i8> @llvm.arm.neon.aese(<16 x i8> %f23, <16 x i8> %k3)
  %f33 = call <16 x i8> @llvm.arm.neon.aesmc(<16 x i8> %e23)
  %g0 = call <16 x i8> @llvm.arm.neon.aese(<16 x i8> %f30, <16 x i8> %d)
  %h0 = xor <16 x i8> %g0, %e
  %g1 = call <16 x i8> @llvm.arm.neon.aese(<16 x i8> %f31, <16 x i8> %d)
  %h1 = xor <16 x i8> %g1, %e
  %g2 = call <16 x i8> @llvm.arm.neon.aese(<16 x i8> %f32, <16 x i8> %d)
  %h2 = xor <16 x i8> %g2, %e
  %g3 = call <16 x i8> @llvm.arm.neon.aese(<16 x i8> %f33, <16 x i8> %d)
  %h3 = xor <16 x i8> %g3, %e
  store <16 x i8> %h0, ptr %c0
  %c1 = getelementptr inbounds <16 x i8>, ptr %c0, i64 1
  store <16 x i8> %h1, ptr %c1
  %c2 = getelementptr inbounds <16 x i8>, ptr %c0, i64 2
  store <16 x i8> %h2, ptr %c2
  %c3 = getelementptr inbounds <16 x i8>, ptr %c0, i64 3
  store <16 x i8> %h3, ptr %c3
  ret void








}

define void @aesda(ptr %a0, ptr %b0, ptr %c0, <16 x i8> %d, <16 x i8> %e) {
; CHECK-LABEL: aesda:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    add r12, r0, #48
; CHECK-NEXT:    vld1.8 {d26, d27}, [r0]!
; CHECK-NEXT:    add r3, r1, #32
; CHECK-NEXT:    vld1.8 {d22, d23}, [r1]!
; CHECK-NEXT:    vld1.8 {d24, d25}, [r0]!
; CHECK-NEXT:    vld1.8 {d20, d21}, [r3]!
; CHECK-NEXT:    mov r1, sp
; CHECK-NEXT:    vld1.64 {d16, d17}, [r1]
; CHECK-NEXT:    add r1, sp, #16
; CHECK-NEXT:    vld1.64 {d18, d19}, [r1]
; CHECK-NEXT:    aesd.8 q13, q11
; CHECK-NEXT:    aesimc.8 q13, q13
; CHECK-NEXT:    vld1.64 {d28, d29}, [r0]
; CHECK-NEXT:    aesd.8 q13, q10
; CHECK-NEXT:    aesimc.8 q13, q13
; CHECK-NEXT:    aesd.8 q12, q11
; CHECK-NEXT:    aesimc.8 q12, q12
; CHECK-NEXT:    aesd.8 q13, q8
; CHECK-NEXT:    vld1.64 {d30, d31}, [r12]
; CHECK-NEXT:    aesd.8 q12, q10
; CHECK-NEXT:    aesimc.8 q12, q12
; CHECK-NEXT:    veor q13, q13, q9
; CHECK-NEXT:    aesd.8 q14, q11
; CHECK-NEXT:    aesimc.8 q14, q14
; CHECK-NEXT:    aesd.8 q12, q8
; CHECK-NEXT:    aesd.8 q14, q10
; CHECK-NEXT:    aesimc.8 q14, q14
; CHECK-NEXT:    aesd.8 q15, q11
; CHECK-NEXT:    aesimc.8 q11, q15
; CHECK-NEXT:    veor q12, q12, q9
; CHECK-NEXT:    aesd.8 q14, q8
; CHECK-NEXT:    add r0, r2, #32
; CHECK-NEXT:    vst1.8 {d26, d27}, [r2]!
; CHECK-NEXT:    aesd.8 q11, q10
; CHECK-NEXT:    aesimc.8 q10, q11
; CHECK-NEXT:    veor q11, q14, q9
; CHECK-NEXT:    aesd.8 q10, q8
; CHECK-NEXT:    vst1.64 {d24, d25}, [r2]
; CHECK-NEXT:    veor q8, q10, q9
; CHECK-NEXT:    vst1.8 {d22, d23}, [r0]!
; CHECK-NEXT:    vst1.64 {d16, d17}, [r0]
; CHECK-NEXT:    bx lr
  %d0 = load <16 x i8>, ptr %a0
  %a1 = getelementptr inbounds <16 x i8>, ptr %a0, i64 1
  %d1 = load <16 x i8>, ptr %a1
  %a2 = getelementptr inbounds <16 x i8>, ptr %a0, i64 2
  %d2 = load <16 x i8>, ptr %a2
  %a3 = getelementptr inbounds <16 x i8>, ptr %a0, i64 3
  %d3 = load <16 x i8>, ptr %a3
  %k0 = load <16 x i8>, ptr %b0
  %e00 = call <16 x i8> @llvm.arm.neon.aesd(<16 x i8> %d0, <16 x i8> %k0)
  %f00 = call <16 x i8> @llvm.arm.neon.aesimc(<16 x i8> %e00)
  %e01 = call <16 x i8> @llvm.arm.neon.aesd(<16 x i8> %d1, <16 x i8> %k0)
  %f01 = call <16 x i8> @llvm.arm.neon.aesimc(<16 x i8> %e01)
  %e02 = call <16 x i8> @llvm.arm.neon.aesd(<16 x i8> %d2, <16 x i8> %k0)
  %f02 = call <16 x i8> @llvm.arm.neon.aesimc(<16 x i8> %e02)
  %e03 = call <16 x i8> @llvm.arm.neon.aesd(<16 x i8> %d3, <16 x i8> %k0)
  %f03 = call <16 x i8> @llvm.arm.neon.aesimc(<16 x i8> %e03)
  %b1 = getelementptr inbounds <16 x i8>, ptr %b0, i64 1
  %k1 = load <16 x i8>, ptr %b1
  %e10 = call <16 x i8> @llvm.arm.neon.aesd(<16 x i8> %f00, <16 x i8> %k1)
  %f10 = call <16 x i8> @llvm.arm.neon.aesimc(<16 x i8> %e00)
  %e11 = call <16 x i8> @llvm.arm.neon.aesd(<16 x i8> %f01, <16 x i8> %k1)
  %f11 = call <16 x i8> @llvm.arm.neon.aesimc(<16 x i8> %e01)
  %e12 = call <16 x i8> @llvm.arm.neon.aesd(<16 x i8> %f02, <16 x i8> %k1)
  %f12 = call <16 x i8> @llvm.arm.neon.aesimc(<16 x i8> %e02)
  %e13 = call <16 x i8> @llvm.arm.neon.aesd(<16 x i8> %f03, <16 x i8> %k1)
  %f13 = call <16 x i8> @llvm.arm.neon.aesimc(<16 x i8> %e03)
  %b2 = getelementptr inbounds <16 x i8>, ptr %b0, i64 2
  %k2 = load <16 x i8>, ptr %b2
  %e20 = call <16 x i8> @llvm.arm.neon.aesd(<16 x i8> %f10, <16 x i8> %k2)
  %f20 = call <16 x i8> @llvm.arm.neon.aesimc(<16 x i8> %e10)
  %e21 = call <16 x i8> @llvm.arm.neon.aesd(<16 x i8> %f11, <16 x i8> %k2)
  %f21 = call <16 x i8> @llvm.arm.neon.aesimc(<16 x i8> %e11)
  %e22 = call <16 x i8> @llvm.arm.neon.aesd(<16 x i8> %f12, <16 x i8> %k2)
  %f22 = call <16 x i8> @llvm.arm.neon.aesimc(<16 x i8> %e12)
  %e23 = call <16 x i8> @llvm.arm.neon.aesd(<16 x i8> %f13, <16 x i8> %k2)
  %f23 = call <16 x i8> @llvm.arm.neon.aesimc(<16 x i8> %e13)
  %b3 = getelementptr inbounds <16 x i8>, ptr %b0, i64 3
  %k3 = load <16 x i8>, ptr %b3
  %e30 = call <16 x i8> @llvm.arm.neon.aesd(<16 x i8> %f20, <16 x i8> %k3)
  %f30 = call <16 x i8> @llvm.arm.neon.aesimc(<16 x i8> %e20)
  %e31 = call <16 x i8> @llvm.arm.neon.aesd(<16 x i8> %f21, <16 x i8> %k3)
  %f31 = call <16 x i8> @llvm.arm.neon.aesimc(<16 x i8> %e21)
  %e32 = call <16 x i8> @llvm.arm.neon.aesd(<16 x i8> %f22, <16 x i8> %k3)
  %f32 = call <16 x i8> @llvm.arm.neon.aesimc(<16 x i8> %e22)
  %e33 = call <16 x i8> @llvm.arm.neon.aesd(<16 x i8> %f23, <16 x i8> %k3)
  %f33 = call <16 x i8> @llvm.arm.neon.aesimc(<16 x i8> %e23)
  %g0 = call <16 x i8> @llvm.arm.neon.aesd(<16 x i8> %f30, <16 x i8> %d)
  %h0 = xor <16 x i8> %g0, %e
  %g1 = call <16 x i8> @llvm.arm.neon.aesd(<16 x i8> %f31, <16 x i8> %d)
  %h1 = xor <16 x i8> %g1, %e
  %g2 = call <16 x i8> @llvm.arm.neon.aesd(<16 x i8> %f32, <16 x i8> %d)
  %h2 = xor <16 x i8> %g2, %e
  %g3 = call <16 x i8> @llvm.arm.neon.aesd(<16 x i8> %f33, <16 x i8> %d)
  %h3 = xor <16 x i8> %g3, %e
  store <16 x i8> %h0, ptr %c0
  %c1 = getelementptr inbounds <16 x i8>, ptr %c0, i64 1
  store <16 x i8> %h1, ptr %c1
  %c2 = getelementptr inbounds <16 x i8>, ptr %c0, i64 2
  store <16 x i8> %h2, ptr %c2
  %c3 = getelementptr inbounds <16 x i8>, ptr %c0, i64 3
  store <16 x i8> %h3, ptr %c3
  ret void








}

define void @aes_load_store(ptr %p1, ptr %p2 , ptr %p3) {
; CHECK-LABEL: aes_load_store:
; CHECK:       @ %bb.0: @ %entry
; CHECK-NEXT:    push {r11}
; CHECK-NEXT:    mov r11, sp
; CHECK-NEXT:    sub sp, sp, #92
; CHECK-NEXT:    bfc sp, #0, #4
; CHECK-NEXT:    vld1.64 {d16, d17}, [r0:128]
; CHECK-NEXT:    add r0, sp, #64
; CHECK-NEXT:    vst1.64 {d16, d17}, [r0:128]
; CHECK-NEXT:    add r0, sp, #48
; CHECK-NEXT:    vorr q9, q8, q8
; CHECK-NEXT:    aese.8 q9, q8
; CHECK-NEXT:    aesmc.8 q10, q9
; CHECK-NEXT:    vst1.64 {d18, d19}, [r0:128]
; CHECK-NEXT:    vld1.64 {d18, d19}, [r1:128]
; CHECK-NEXT:    add r0, sp, #32
; CHECK-NEXT:    vst1.64 {d20, d21}, [r0:128]
; CHECK-NEXT:    add r0, sp, #16
; CHECK-NEXT:    aese.8 q9, q8
; CHECK-NEXT:    aesmc.8 q8, q9
; CHECK-NEXT:    vst1.64 {d18, d19}, [r0:128]
; CHECK-NEXT:    mov r0, sp
; CHECK-NEXT:    vst1.64 {d16, d17}, [r0:128]
; CHECK-NEXT:    mov sp, r11
; CHECK-NEXT:    pop {r11}
; CHECK-NEXT:    bx lr
entry:
  %x1 = alloca <16 x i8>, align 16
  %x2 = alloca <16 x i8>, align 16
  %x3 = alloca <16 x i8>, align 16
  %x4 = alloca <16 x i8>, align 16
  %x5 = alloca <16 x i8>, align 16
  %in1 = load <16 x i8>, ptr %p1, align 16
  store <16 x i8> %in1, ptr %x1, align 16
  %aese1 = call <16 x i8> @llvm.arm.neon.aese(<16 x i8> %in1, <16 x i8> %in1) #2
  store <16 x i8> %aese1, ptr %x2, align 16
  %in2 = load <16 x i8>, ptr %p2, align 16
  %aesmc1= call <16 x i8> @llvm.arm.neon.aesmc(<16 x i8> %aese1) #2
  store <16 x i8> %aesmc1, ptr %x3, align 16
  %aese2 = call <16 x i8> @llvm.arm.neon.aese(<16 x i8> %in1, <16 x i8> %in2) #2
  store <16 x i8> %aese2, ptr %x4, align 16
  %aesmc2= call <16 x i8> @llvm.arm.neon.aesmc(<16 x i8> %aese2) #2
  store <16 x i8> %aesmc2, ptr %x5, align 16
  ret void


}
