; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc < %s -mtriple=riscv32 | FileCheck %s

define i1 @f(i64 %LGV1) {
; CHECK-LABEL: f:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a0, 1
; CHECK-NEXT:    ret
  %B1 = xor i64 %LGV1, %LGV1
  %B2 = srem i64 1, %B1
  %B5 = lshr i64 1, %B2
  %C4 = icmp ule i64 %LGV1, %B5
  ret i1 %C4
}

define i64 @g(ptr %A, i64 %0) {
; CHECK-LABEL: g:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mv a3, a0
; CHECK-NEXT:    lw a0, 0(a0)
; CHECK-NEXT:    lw a3, 4(a3)
; CHECK-NEXT:    beqz a2, .LBB1_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    slti a1, a2, 1
; CHECK-NEXT:    j .LBB1_3
; CHECK-NEXT:  .LBB1_2:
; CHECK-NEXT:    li a2, 1
; CHECK-NEXT:    addi a4, a0, -32
; CHECK-NEXT:    srl a2, a2, a0
; CHECK-NEXT:    srai a4, a4, 31
; CHECK-NEXT:    and a2, a4, a2
; CHECK-NEXT:    sltu a1, a2, a1
; CHECK-NEXT:    xori a1, a1, 1
; CHECK-NEXT:  .LBB1_3:
; CHECK-NEXT:    sb a1, 0(zero)
; CHECK-NEXT:    mv a1, a3
; CHECK-NEXT:    ret
  store i64 poison, ptr %A, align 4
  %LGV1 = load i64, ptr %A, align 4
  %B1 = ashr i64 1, %LGV1
  %C = icmp sle i64 %0, %B1
  store i1 %C, ptr null, align 1
  ret i64 %LGV1
}
